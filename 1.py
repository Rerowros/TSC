from telethon import TelegramClient, events, Button
import os
import json
import paramiko
import asyncio
import re
import ipaddress

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ config.json
with open('config.json', 'r') as config_file:
    config = json.load(config_file)
    
API_ID = config['API_ID']
API_HASH = config['API_HASH']
BOT_TOKEN = config['BOT_TOKEN']

bot = TelegramClient('bot', API_ID, API_HASH).start(bot_token=BOT_TOKEN)
    
SERVERS_FILE = 'servers.json'
user_servers = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

def save_servers():
    global user_servers  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    with open(SERVERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_servers, f, ensure_ascii=False, indent=4)

def load_servers():
    global user_servers  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    try:
        if os.path.exists(SERVERS_FILE):
            if os.path.getsize(SERVERS_FILE) > 0:
                with open(SERVERS_FILE, 'r', encoding='utf-8') as f:
                    user_servers = json.load(f)
                    return user_servers
            else:
                save_servers()
        else:
            save_servers()
        return {}
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
        save_servers()
        return {}




def validate_server_input(server_string):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        name, ip, username, password = server_string.split(':')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π
        if len(name) < 3 or len(username) < 2 or len(password) < 4:
            return False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞
        try:
            ipaddress.ip_address(ip)
        except ValueError:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP –∞–¥—Ä–µ—Å–∞"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
        if not re.match(r'^[a-zA-Z0-9_-]+$', name):
            return False, "–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, - –∏ _"
            
        return True, None
    except ValueError:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ:IP:–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:–ø–∞—Ä–æ–ª—å"



async def show_main_menu(event):
    user_id = str(event.sender_id)
    if user_id not in user_servers:
        await event.reply('–î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–Ω–∞–∑–≤–∞–Ω–∏–µ:IP:–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:–ø–∞—Ä–æ–ª—å')
        return
    
    buttons = []
    server_info = user_servers[user_id]
    server_button = Button.inline(f"üñ•Ô∏è {server_info['name']}", f"server:{server_info['name']}")
    buttons.append([server_button])
    await event.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:', buttons=buttons)

async def show_server_menu(event, server_name):
    buttons = [
        [Button.inline('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', f'stats:{server_name}')],
        [
            Button.inline('üíª –ö–æ–Ω—Å–æ–ª—å', f'console:{server_name}'),
            Button.inline('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞', f'reboot:{server_name}')
        ],
        [
            Button.inline('üìÅ –§–∞–π–ª—ã', f'files:{server_name}'),
            Button.inline('üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', f'security:{server_name}')
        ],
        [Button.inline('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_main')]
    ]
    await event.edit('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º:', buttons=buttons)


@bot.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    global user_servers
    user_servers = load_servers()  
    user_id = str(event.sender_id)
    
    if user_id in user_servers:
        await show_main_menu(event)
    else:
        await event.reply('–î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–Ω–∞–∑–≤–∞–Ω–∏–µ:IP:–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:–ø–∞—Ä–æ–ª—å')

@bot.on(events.NewMessage)
async def message_handler(event):
    user_id = str(event.sender_id)
    
    if event.raw_text.startswith('/'):
        return
        
    if ':' in event.raw_text:
        is_valid, error_message = validate_server_input(event.raw_text)
        
        if not is_valid:
            await event.reply(f'‚ùå {error_message}')
            return
            
        try:
            name, ip, username, password = event.raw_text.split(':')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            try:
                ssh.connect(ip, username=username, password=password, timeout=10)
                ssh.close()
                
                user_servers[user_id] = {
                    'name': name,
                    'ip': ip,
                    'username': username,
                    'password': password
                }
                save_servers()
                
                try:
                    await event.message.delete()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                await event.reply(f'‚úÖ –°–µ—Ä–≤–µ—Ä {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
                await show_main_menu(event)
                
            except Exception as e:
                await event.reply(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}')
                
        except Exception as e:
            await event.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞')
    else:
        if user_id in user_servers:
            await show_main_menu(event)
        else:
            await event.reply('–î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–Ω–∞–∑–≤–∞–Ω–∏–µ:IP:–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:–ø–∞—Ä–æ–ª—å')




@bot.on(events.CallbackQuery)
async def callback_handler(event):
    data = event.data.decode()
    
    if data == 'back_to_main':
        await show_main_menu(event)
        return
        
    if data.startswith('server:'):
        server_name = data.split(':')[1]
        await show_server_menu(event, server_name)
        return
        
    if data.startswith(('console:', 'stats:', 'reboot:', 'files:', 'security:')):
        action = data.split(':')[0]
        server_name = data.split(':')[1]
        messages = {
            'console': 'console',
            'stats': 'stats',
            'reboot': 'reboot',
            'files': 'files',
            'security': 'security'
        }
        await event.answer(messages[action])

if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    bot.run_until_disconnected()