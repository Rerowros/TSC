import os
import ipaddress
import json
import re
import time
from pathlib import Path
from typing import Dict, Any
import paramiko
import asyncio
from telethon import TelegramClient, events, Button


# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------
CONFIG_FILE = Path('config.json')
with CONFIG_FILE.open('r', encoding="utf-8") as config_file:
    config = json.load(config_file)

# ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----------
API_ID = config['API_ID']
API_HASH = config['API_HASH']
BOT_TOKEN = config['BOT_TOKEN']
SERVERS_FILE = Path('servers.json')
SSH_TIMEOUT = 300  # 5 minutes in seconds

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∫–ª–∏–µ–Ω—Ç–∞ ----------
bot = TelegramClient('bot', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

# ---------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º ----------
user_servers: Dict[str, Any] = {}  # Loaded from servers.json
console_mode: Dict[int, bool] = {}
ssh_connections: Dict[int, paramiko.SSHClient] = {}
last_activity: Dict[int, float] = {}
session_start_times: Dict[int, float] = {}

# ---------- –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ ----------
# —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ JSON —Ñ–∞–π–ª
def save_servers():
    global user_servers
    with open(SERVERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_servers, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_servers():
    global user_servers
    try:
        if os.path.exists(SERVERS_FILE):
            if os.path.getsize(SERVERS_FILE) > 0:
                with open(SERVERS_FILE, 'r', encoding='utf-8') as f:
                    user_servers = json.load(f)
                    return user_servers
            else:
                save_servers()
        else:
            save_servers()
        return {}
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
        save_servers()
        return {}

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
def validate_server_input(server_string):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        name, ip, user, password = server_string.split(':')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞
        try:
            ipaddress.ip_address(ip)
        except ValueError:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP –∞–¥—Ä–µ—Å–∞"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
        if not re.match(r'^[a-zA-Z0-9_-]+$', name):
            return False, "–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, - –∏ _"

        return True, None
    except ValueError:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ:IP:–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:–ø–∞—Ä–æ–ª—å"

# —Ä–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π
async def send_long_message(event, message):
    for i in range(0, len(message), 4096):
        await event.reply(message[i:i + 4096])
        
# ---------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ ----------
def format_remaining_time(user_id: int) -> str:
    """Format remaining SSH session time for display."""
    if user_id not in last_activity:
        return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"
    
    elapsed = time.time() - last_activity[user_id]
    remaining = SSH_TIMEOUT - elapsed
    
    if remaining <= 0:
        return "Session ending"
        
    minutes = int(remaining // 60)
    seconds = int(remaining % 60)
    return f"Time remaining: {minutes}m {seconds}s"

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async def maintain_ssh_connections():
    while True:
        current_time = time.time()
        to_close = []
        
        for user_id in last_activity:
            if current_time - last_activity[user_id] > SSH_TIMEOUT:
                to_close.append(user_id)
                
        for user_id in to_close:
            if user_id in ssh_connections:
                try:
                    ssh_connections[user_id].close()
                except Exception:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {user_id}")
                    pass
                del ssh_connections[user_id]
                del last_activity[user_id]
                console_mode[user_id] = False
                
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞


# –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_ssh_connection(user_id, server):
    if user_id in ssh_connections and ssh_connections[user_id].get_transport() and ssh_connections[user_id].get_transport().is_active():
        return ssh_connections[user_id]
    
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(
            server['ip'],
            username=server['username'],
            password=server['password'],
            timeout=10
        )
        ssh_connections[user_id] = ssh
        last_activity[user_id] = time.time()
        return ssh
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

# –í—ã–ø–æ–ª–Ω—è–µ—Ç SSH –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
async def execute_ssh_command(ip, username, password, command, user_id=None, event=None):    
    try:
        server = user_servers[user_id]
        ssh = await get_ssh_connection(user_id, server)
        last_activity[user_id] = time.time()
        
        stdin, stdout, stderr = ssh.exec_command(command)
        stdin.close() # –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–ª—è —è–≤–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
        output = stdout.read().decode()
        error = stderr.read().decode()
        
        return output if output else error
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

# –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤
async def show_main_menu(event):
    user_id = str(event.sender_id)
    if user_id not in user_servers:
        await event.reply('–î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–Ω–∞–∑–≤–∞–Ω–∏–µ:IP:–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:–ø–∞—Ä–æ–ª—å')
        return

    buttons = []
    server_info = user_servers[user_id]
    server_button = Button.inline(f"üñ•Ô∏è {server_info['name']}", f"server:{server_info['name']}")
    buttons.append([server_button])
    await event.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:', buttons=buttons)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
async def show_server_menu(event, server_name):
    buttons = [
        [Button.inline('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', f'stats:{server_name}')],
        [
            Button.inline('üíª –ö–æ–Ω—Å–æ–ª—å', f'console:{server_name}'),
            Button.inline('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞', f'reboot:{server_name}')
        ],
        [
            Button.inline('üìÅ –§–∞–π–ª—ã', f'files:{server_name}'),
            Button.inline('üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', f'security:{server_name}')
        ],
        [Button.inline('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_to_main')]
    ]
    await event.edit('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º:', buttons=buttons)

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ----------
@bot.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    global user_servers
    user_servers = load_servers()
    user_id = str(event.sender_id)

    if user_id in user_servers:
        await show_main_menu(event)
    else:
        await event.reply('–î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–Ω–∞–∑–≤–∞–Ω–∏–µ:IP:–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:–ø–∞—Ä–æ–ª—å')

@bot.on(events.NewMessage)
async def message_handler(event):
    global console_mode
    user_id = str(event.sender_id)

    # –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥
    if event.raw_text.startswith('/'):
        return
    
    # —Ä–µ–∂–∏–º –∫–æ–Ω—Å–æ–ª–∏
    if user_id in console_mode and console_mode[user_id]:
        if event.raw_text.lower() == 'exit':
            console_mode[user_id] = False
            if user_id in ssh_connections:
                ssh_connections[user_id].close()
                del ssh_connections[user_id]
                if user_id in last_activity:
                    del last_activity[user_id]
            buttons = [
                [Button.inline('üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continue_console')],
                [Button.inline('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
            ]
            await event.reply('–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Å–æ–ª–∏', buttons=buttons)
            return
            
        if user_id in user_servers:
            server = user_servers[user_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            if int(user_id) not in last_activity:
                last_activity[int(user_id)] = time.time()
                session_start_times[int(user_id)] = time.time()
            
            result = await execute_ssh_command(
                server['ip'],
                server['username'],
                server['password'],
                event.raw_text,
                user_id
            )
            remaining_time = format_remaining_time(int(user_id))
            buttons = [
                [Button.inline('‚ùå –í—ã—Ö–æ–¥', 'exit_console')],
                [Button.inline('üîÑ–ü—Ä–æ–¥–ª–∏—Ç—å —Å–µ—Å—Å–∏—é', 'console_time_add')]
            ]
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            formatted_result = f'```\n{result}\n```\n{remaining_time}'
            if len(formatted_result) > 4096:
                await send_long_message(event, formatted_result)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await event.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å—é:', buttons=buttons)
            else:
                await event.reply(formatted_result, buttons=buttons)
            return

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞    
    if ':' in event.raw_text:
        is_valid, error_message = validate_server_input(event.raw_text)
        if not is_valid:
            await event.reply(f'‚ùå {error_message}')
            return

        try:
            name, ip, username, password = event.raw_text.split(':')

            # SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

            try:
                ssh.connect(ip, username=username, password=password, timeout=10)
                ssh.close()

                user_servers[user_id] = {
                    'name': name,
                    'ip': ip,
                    'username': username,
                    'password': password
                }
                save_servers()

                try:
                    await event.message.delete()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                await event.reply(f'‚úÖ –°–µ—Ä–≤–µ—Ä {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
                await show_main_menu(event)

            except Exception as e:
                await event.reply(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}')

        except Exception as e:
            await event.reply(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ {e}')
    else:
        if user_id in user_servers:
            await show_main_menu(event)
        else:
            await event.reply('–î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–Ω–∞–∑–≤–∞–Ω–∏–µ:IP:–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:–ø–∞—Ä–æ–ª—å')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.on(events.CallbackQuery)
async def callback_handler(event):
    global console_mode
    data = event.data.decode()
    user_id = str(event.sender_id)

    if data == 'back_to_main':
        await show_main_menu(event)
        return

    if data.startswith('console:'):
        server_name = data.split(':')[1]
        console_mode[user_id] = True
        await event.edit(
            "üìü –†–µ–∂–∏–º –∫–æ–Ω—Å–æ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            "–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ 'exit'"
        )
        return
    
    if data == 'continue_console':
        console_mode[user_id] = True
        await event.edit('–†–µ–∂–∏–º –∫–æ–Ω—Å–æ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
    elif data == 'exit_console':
        console_mode[user_id] = False
        await event.edit('–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏')
        await show_main_menu(event)
    elif data == 'back_to_main':
        await show_main_menu(event)
    if data.startswith('server:'):
        server_name = data.split(':')[1]
        await show_server_menu(event, server_name)
        return
        
    if data.startswith(('console:', 'stats:', 'reboot:', 'files:', 'security:')):
        action = data.split(':')[0]
        messages = {
            'console': 'console',
            'stats': 'stats',
            'reboot': 'reboot',
            'files': 'files',
            'security': 'security'
        }
        await event.answer(messages[action])

if __name__ == '__main__':
    print('Bot started time:', time.asctime())
    
    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º event loop
    loop = asyncio.get_event_loop()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    loop.create_task(maintain_ssh_connections())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.run_until_disconnected()